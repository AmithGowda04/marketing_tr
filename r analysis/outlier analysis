
############################################Outlier Analysis#############################################
# ## BoxPlots - Distribution and Outlier Check
numeric_index = sapply(marketing_train,is.numeric) #selecting only numeric
numeric_data = marketing_train[,numeric_index]
# store the numeric data in the columns
cnames = colnames(numeric_data)
 
# using the ggplot to all the variables to plot the graph by assigning the values from (gn1 to gn11) for the independent vars
for (i in 1:length(cnames))
 {
   assign(paste0("gn",i), ggplot(aes_string(y = (cnames[i]), x = "responded"), data = subset(marketing_train))+ 
            stat_boxplot(geom = "errorbar", width = 0.5) +
            geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,
                         outlier.size=1, notch=FALSE) +
            theme(legend.position="bottom")+
            labs(y=cnames[i],x="responded")+
            ggtitle(paste("Box plot of responded for",cnames[i])))
 }
 
### Plotting plots together
gridExtra::grid.arrange(gn1,gn5,gn2,ncol=3)
gridExtra::grid.arrange(gn6,gn7,ncol=2)
gridExtra::grid.arrange(gn8,gn9,ncol=2)
## after the outlier analysis is done make sure to remove it for further analysis 
# remove the outliers using boxplot method
df = marketing_train
# detect the outliers and remove them using boxplot.stats (built in) function
val =marketing_train$previous[marketing_train$previous %in% boxplot.stats(marketing_train$previous) $out]
# remove the observation which contains the outliers
marketing_train = marketing_train[which(!marketing_train$previous %in% val),]
marketing_train =df
# loop to remove the outliers from all the observations
for(i in cnames)
{
print(i)
val = marketing_train[,i][marketing_train[,i]] %in% boxplot.stats(marketing_train[,i])$out]
marketing_train[,i][marketing_train[,i] %in% val] = NA
}
# impute knn
marketing_train = knnImputation(marketing_train , k=3)
